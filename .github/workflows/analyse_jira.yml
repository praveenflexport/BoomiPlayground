name: Analyze Jira and Summarize Testing

on:
  workflow_dispatch:
    inputs:
      jira_id:
        description: 'Enter the Jira Ticket ID (e.g. PROJ-123)'
        required: true

jobs:
  analyze-jira:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install requests openai

      - name: Analyze Jira ticket
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_ID: ${{ github.event.inputs.jira_id }}
        run: |
          python3 <<EOF
          import os
          import requests
          import base64
          from openai import OpenAI

          def flatten_comments(comments):
              flat = []
              for c in comments:
                  try:
                      blocks = c['body']['content']
                      for block in blocks:
                          for piece in block.get('content', []):
                              flat.append(piece.get('text', ''))
                  except Exception:
                      continue
              return flat

          jira_id = os.environ['JIRA_ID']
          base_url = os.environ['JIRA_BASE_URL']
          user_email = os.environ['JIRA_USER_EMAIL']
          api_token = os.environ['JIRA_API_TOKEN']
          auth_str = f"{user_email}:{api_token}"

          headers = {
              "Authorization": "Basic " + base64.b64encode(auth_str.encode()).decode(),
              "Accept": "application/json"
          }

          res = requests.get(f"{base_url}/rest/api/3/issue/{jira_id}?expand=renderedFields", headers=headers)
          res.raise_for_status()
          issue_data = res.json()

          summary = issue_data['fields'].get('summary', '')
          description = issue_data['fields'].get('description', {}).get('content', [])
          desc_text = " ".join([p['content'][0].get('text', '') for p in description if p.get('content')])
          components = issue_data['fields'].get('components', [])
          component_names = [c.get('id', 'unknown') for c in components]

          comments = issue_data["fields"].get("comment", {}).get("comments", [])
          flattened_comments = flatten_comments(comments)
          comment_text = "\n".join(flattened_comments)

          client = OpenAI(api_key=os.environ['OPENAI_API_KEY'])

          prompt = f"""
          You are a senior QA engineer reviewing a Jira ticket. Analyze the following Jira issue and extract:

          1. What testing has been done (manual, automated, scope, edge cases)?
          2. All component IDs involved.
          3. Any mention of a previous and current version.
          4. Any useful notes for regression or rollout.

          Jira Summary: {summary}

          Jira Description: {desc_text}

          Components: {', '.join(component_names)}

          Comments:
          {comment_text}

          Return your response as a structured report.
          """

          response = client.chat.completions.create(
              model="gpt-4",
              messages=[{"role": "user", "content": prompt}],
              temperature=0.3
          )

          report = response.choices[0].message.content.strip()

          with open("jira-summary.txt", "w") as f:
              f.write(report)
          EOF

      - name: Commit summary back to repo
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add jira-summary.txt
          git commit -m "Add AI-generated summary for Jira ID ${{ github.event.inputs.jira_id }}" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
